; ModuleID = 'clone1.c'
source_filename = "clone1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"





;
define i32 @G() #0 !dbg !6 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @C(), !dbg !10
  %0 = load i32, i32* %retval, align 4, !dbg !11
  ret i32 %0, !dbg !11
}

;
define i32 @A() #0 !dbg !12 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @C.1(), !dbg !13
  %call1 = call i32 @C.2(), !dbg !14
  %0 = load i32, i32* %retval, align 4, !dbg !15
  ret i32 %0, !dbg !15
}

;
define i32 @B() #0 !dbg !16 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @C.3(), !dbg !17
  %0 = load i32, i32* %retval, align 4, !dbg !18
  ret i32 %0, !dbg !18
}

;
define i32 @C() #0 !dbg !19 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @D(), !dbg !20
  %0 = load i32, i32* %retval, align 4, !dbg !21
  ret i32 %0, !dbg !21
}

;
define i32 @E() #0 !dbg !22 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @D.1(), !dbg !23
  %0 = load i32, i32* %retval, align 4, !dbg !24
  ret i32 %0, !dbg !24
}

;
define i32 @D() #0 !dbg !25 {
entry:
  %retval = alloca i32, align 4
  %call = call noalias i8* @malloc(i64 1) #2, !dbg !26
  %0 = load i32, i32* %retval, align 4, !dbg !27
  ret i32 %0, !dbg !27
}

;
declare noalias i8* @malloc(i64) #1

;
define i32 @main() #0 !dbg !28 {
entry:
  %call = call i32 @A(), !dbg !29
  %call1 = call i32 @B(), !dbg !30
  ret i32 0, !dbg !31
}

;
define i32 @C.1() #0 !dbg !19 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @D.2(), !dbg !20
  %0 = load i32, i32* %retval, align 4, !dbg !21
  ret i32 %0, !dbg !21
}

;
define i32 @C.2() #0 !dbg !19 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @D.3(), !dbg !20
  %0 = load i32, i32* %retval, align 4, !dbg !21
  ret i32 %0, !dbg !21
}

;
define i32 @C.3() #0 !dbg !19 {
entry:
  %retval = alloca i32, align 4
  %call = call i32 @D.4(), !dbg !20
  %0 = load i32, i32* %retval, align 4, !dbg !21
  ret i32 %0, !dbg !21
}

;
define i32 @D.1() #0 !dbg !25 {
entry:
  %retval = alloca i32, align 4
  %call = call noalias i8* @malloc(i64 1) #2, !dbg !26
  %0 = load i32, i32* %retval, align 4, !dbg !27
  ret i32 %0, !dbg !27
}

;
define i32 @D.2() #0 !dbg !25 {
entry:
  %retval = alloca i32, align 4
  %call = call noalias i8* @malloc(i64 1) #2, !dbg !26
  %0 = load i32, i32* %retval, align 4, !dbg !27
  ret i32 %0, !dbg !27
}

;
define i32 @D.3() #0 !dbg !25 {
entry:
  %retval = alloca i32, align 4
  %call = call noalias i8* @malloc(i64 1) #2, !dbg !26
  %0 = load i32, i32* %retval, align 4, !dbg !27
  ret i32 %0, !dbg !27
}

;
define i32 @D.4() #0 !dbg !25 {
entry:
  %retval = alloca i32, align 4
  %call = call noalias i8* @malloc(i64 1) #2, !dbg !26
  %0 = load i32, i32* %retval, align 4, !dbg !27
  ret i32 %0, !dbg !27
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.ident = !{!5}
!llvm.module.flags = !{!3, !4}
!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 5.0.0 (trunk 303350)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "clone1.c", directory: "/home/tzhou/ClionProjects/LLParser/test/clone")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{!"clang version 5.0.0 (trunk 303350)"}
!6 = distinct !DISubprogram(name: "G", scope: !1, file: !1, line: 16, type: !7, isLocal: false, isDefinition: true, scopeLine: 16, isOptimized: false, unit: !0, variables: !2)
!7 = !DISubroutineType(types: !8)
!8 = !{!9}
!9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !DILocation(line: 17, column: 5, scope: !6)
!11 = !DILocation(line: 18, column: 1, scope: !6)
!12 = distinct !DISubprogram(name: "A", scope: !1, file: !1, line: 20, type: !7, isLocal: false, isDefinition: true, scopeLine: 20, isOptimized: false, unit: !0, variables: !2)
!13 = !DILocation(line: 21, column: 5, scope: !12)
!14 = !DILocation(line: 22, column: 5, scope: !12)
!15 = !DILocation(line: 23, column: 1, scope: !12)
!16 = distinct !DISubprogram(name: "B", scope: !1, file: !1, line: 25, type: !7, isLocal: false, isDefinition: true, scopeLine: 25, isOptimized: false, unit: !0, variables: !2)
!17 = !DILocation(line: 26, column: 5, scope: !16)
!18 = !DILocation(line: 27, column: 1, scope: !16)
!19 = distinct !DISubprogram(name: "C", scope: !1, file: !1, line: 29, type: !7, isLocal: false, isDefinition: true, scopeLine: 29, isOptimized: false, unit: !0, variables: !2)
!20 = !DILocation(line: 30, column: 5, scope: !19)
!21 = !DILocation(line: 31, column: 1, scope: !19)
!22 = distinct !DISubprogram(name: "E", scope: !1, file: !1, line: 33, type: !7, isLocal: false, isDefinition: true, scopeLine: 33, isOptimized: false, unit: !0, variables: !2)
!23 = !DILocation(line: 34, column: 5, scope: !22)
!24 = !DILocation(line: 35, column: 1, scope: !22)
!25 = distinct !DISubprogram(name: "D", scope: !1, file: !1, line: 37, type: !7, isLocal: false, isDefinition: true, scopeLine: 37, isOptimized: false, unit: !0, variables: !2)
!26 = !DILocation(line: 38, column: 5, scope: !25)
!27 = !DILocation(line: 39, column: 1, scope: !25)
!28 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 41, type: !7, isLocal: false, isDefinition: true, scopeLine: 41, isOptimized: false, unit: !0, variables: !2)
!29 = !DILocation(line: 42, column: 5, scope: !28)
!30 = !DILocation(line: 43, column: 5, scope: !28)
!31 = !DILocation(line: 44, column: 1, scope: !28)
